/* Есть разные мнения на тему того, когда целесообразно использовать ме- 
ханизм исключений. Обратимся к программе ENGLERR из главы 12 «Пото- 
ки и файлы». Надо ли в виде исключений оформлять ошибки, которые 
делает пользователь при вводе данных? Для этого упражнения будем счи- 
тать, что надо. Добавьте класс исключений к классу Distance в указанной 
программе (см. также примеры XDIST и XDIST2 в этой главе). Сгенерируйте 
исключения во всех местах, где ENGLERR выводила сообщение об ошибке. 
Для выявления конкретной причины исключения (вместо дюймов введе- 
ны какие-то символы, значение дюймов выходит за область допустимых 
значений и т. д.). Кроме того, исключения должны генерироваться в каче- 
стве реакции на ошибки, возникающие в функции isint() (ничего не было 
введено, введено слишком много разрядов значений, введен символ вместо 
числа, число выходит за область допустимых значений). Вопрос к вам: ес- 
ли функция isint() сгенерировала исключение, может ли она оставаться 
независимой? 
Можно зациклить блок повторных попыток и блок-ловушку (создать цикл 
do), чтобы после обработки исключения программа продолжала работу, 
предлагая пользователю повторно ввести данные. 
Если еще немного подумать, то может возникнуть желание генерировать 
исключение в конструкторе с двумя аргументами (в том случае, если про- 
граммист инициализирует Distance значениями, выходящими за область 
допустимых). */
#include <iostream>
#include <stdexcept>
#include <limits> 
using namespace std;
class Distance {
private:
    int feet;
    float inches;
public:
    Distance(int f, float i) {
        if (f < 0) {
            throw invalid_argument("Ошибка: количество футов не может быть отрицательным!");
        }
        if (i < 0 || i >= 12) {
            throw out_of_range("Ошибка: количество дюймов должно быть в диапазоне [0, 12)!");
        }
        feet = f;
        inches = i;
    }
    void getDistance() {
        cout << "Введите расстояние (футы и дюймы): ";
        try {
            if (!(cin >> feet)) {
                throw invalid_argument("Ошибка: введено некорректное значение футов!");
            }
            if (!(cin >> inches)) {
                throw invalid_argument("Ошибка: введено некорректное значение дюймов!");
            }
            if (feet < 0) {
                throw invalid_argument("Ошибка: количество футов не может быть отрицательным!");
            }
            if (inches < 0 || inches >= 12) {
                throw out_of_range("Ошибка: количество дюймов должно быть в диапазоне [0, 12)!");
            }
        }
        catch (const exception& e) {
            cout << "Исключение: " << e.what() << endl;
            cin.clear(); 
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); 
            getDistance();
        }
    }
    void showDistance() const {
        cout << "Расстояние: " << feet << "'-" << inches << "\"" << endl;
    }
};

int main() {
    setlocale(LC_ALL, "rus");
    try {
        Distance d(5, 13); 
    }
    catch (const exception& e) {
        cout << "Ошибка в конструкторе: " << e.what() << endl;
    }
    Distance userDist(0, 0);
    userDist.getDistance();
    userDist.showDistance();
    return 0;
}
