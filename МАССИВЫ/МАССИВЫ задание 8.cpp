/*Другим недостатком C++ является отсутствие автоматической проверки индексов массива на соответствие их границам массива(это делает дей -
ствия с массивами быстрыми, но менее надежными).Мы можем использовать класс для создания надежного массива, который проверяет индек -
сы при любой попытке доступа к массиву. Напишите класс safearay, который использует массив типа int фиксированного размера(назовем его LIMIT) 
в качестве своей единственной переменной.В классе будет два метода.Первый, putel(), принимает индекс и значение типа int как аргументы и вставляет
это значение в массив по заданному индексу.Второй, getel(), принимает индекс как аргумент и возвращает значение типа int, содержащееся в элементе
с этим индексом. Оба метода должны проверять индекс аргумента, чтобы быть уверенными, что он не меньше 0 и не больше, чем LIMIT - 1. Вы можете использовать
этот массив без опаски, что запись будет произведена в другие части памяти.Использование методов для доступа к элементам массива не выглядит
так наглядно, как использование операции[].В главе 8 мы увидим, как перегрузить эту операцию, чтобы сделать работу нашего класса safearay
похожей на работу встроенных массивов. */
#include <iostream>
#include <cstdlib>
using namespace std;
const int LIMIT = 10;

class safearay {
private:
    int arr[LIMIT];
public:
    void putel(int index, int value) {
        if (index < 0 || index >= LIMIT) {
            cout << "Индекс вне допустимого диапазона";
        }
        arr[index] = value;
    }

    int getel(int index) const {
        if (index < 0 || index >= LIMIT) {
            cout << "Индекс вне допустимого диапазона";
        }
        return arr[index];
    }
};

int main() {
    setlocale(LC_ALL, "rus");
    safearay sa1;
    int temp, ind;
    for (int i = 0; i < LIMIT; i++) {
        cout << "Введите значение(" << i << ") = ";
        cin >> temp;
        sa1.putel(i, temp);
    }
    cout << "Введите индекс значения, кoторое хотите узнать (0-9)= "; cin >> ind;
    temp = sa1.getel(ind); 
    cout << "Значение: " << temp;
    return 0;
}
